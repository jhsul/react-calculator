{"version":3,"sources":["components/Button.jsx","components/Display.jsx","components/Calculator.jsx","serviceWorker.js","index.js"],"names":["Button","console","log","className","this","props","class","onClick","value","React","Component","Display","state","Calculator","handleButtonPress","bind","displayElement","createRef","prevNumber","prevOperation","curNumber","i","isNaN","includes","applyLastOperation","parseFloat","toString","concat","substring","length","current","setState","ref","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4695d6a3.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Button.css\";\n\nexport default class Button extends React.Component {\n  handleClick() {\n    console.log(\"hi\");\n  }\n  render() {\n    return (\n      <button\n        className={this.props.class}\n        onClick={() => this.props.onClick(this.props.value)}\n      >\n        {this.props.value}\n      </button>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./Display.css\";\n\nexport default class Display extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { value: \"\" };\n  }\n  render() {\n    return <div className=\"display\">{this.state.value}</div>;\n  }\n}\n","import React from \"react\";\nimport Button from \"./Button\";\nimport Display from \"./Display\";\n\nexport default class Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleButtonPress = this.handleButtonPress.bind(this);\n    this.displayElement = React.createRef();\n    this.prevNumber = null;\n    this.prevOperation = null;\n    this.curNumber = \"\";\n  }\n  handleButtonPress(i) {\n    if (!isNaN(i)) {\n      this.curNumber = this.curNumber.concat(i);\n    } else if ([\"+\", \"-\", \"*\", \"/\"].includes(i)) {\n      this.applyLastOperation();\n      this.prevNumber = this.curNumber;\n      this.prevOperation = i;\n      this.curNumber = \"\";\n    } else if (i === \"+/-\") {\n      this.curNumber = (parseFloat(this.curNumber) * -1).toString();\n    } else if (i === \".\") {\n      if (!this.curNumber.includes(\".\")) {\n        this.curNumber = this.curNumber.concat(\".\");\n      }\n    } else if (i === \"del\") {\n      this.curNumber = this.curNumber.substring(0, this.curNumber.length - 1);\n    } else if (i === \"C\") {\n      this.curNumber = \"\";\n      this.prevOperation = null;\n      this.prevNumber = null;\n    } else if (i === \"=\") {\n      this.applyLastOperation();\n    }\n    this.displayElement.current.setState({ value: this.curNumber });\n  }\n  applyLastOperation() {\n    if (this.prevNumber === null || this.prevOperation === null) {\n      return;\n    }\n    switch (this.prevOperation) {\n      case \"+\":\n        this.curNumber = (\n          parseFloat(this.prevNumber) + parseFloat(this.curNumber)\n        ).toString();\n        break;\n      case \"-\":\n        this.curNumber = (\n          parseFloat(this.prevNumber) - parseFloat(this.curNumber)\n        ).toString();\n        break;\n      case \"*\":\n        this.curNumber = (\n          parseFloat(this.prevNumber) * parseFloat(this.curNumber)\n        ).toString();\n        break;\n      case \"/\":\n        this.curNumber = (\n          parseFloat(this.prevNumber) / parseFloat(this.curNumber)\n        ).toString();\n        break;\n      default:\n        return;\n    }\n    this.prevNumber = null;\n    this.prevOperation = null;\n  }\n  render() {\n    return (\n      <div>\n        <div>\n          <Display ref={this.displayElement} />\n        </div>\n        <div>\n          <Button class=\"digit\" value={\"1\"} onClick={this.handleButtonPress} />\n          <Button class=\"digit\" value={\"2\"} onClick={this.handleButtonPress} />\n          <Button class=\"digit\" value={\"3\"} onClick={this.handleButtonPress} />\n          <Button\n            class=\"action\"\n            value={\"del\"}\n            onClick={this.handleButtonPress}\n          />\n          <Button class=\"action\" value={\"C\"} onClick={this.handleButtonPress} />\n        </div>\n        <div>\n          <Button class=\"digit\" value={\"4\"} onClick={this.handleButtonPress} />\n          <Button class=\"digit\" value={\"5\"} onClick={this.handleButtonPress} />\n          <Button class=\"digit\" value={\"6\"} onClick={this.handleButtonPress} />\n          <Button\n            class=\"operation\"\n            value={\"+\"}\n            onClick={this.handleButtonPress}\n          />\n          <Button\n            class=\"operation\"\n            value={\"-\"}\n            onClick={this.handleButtonPress}\n          />\n        </div>\n        <div>\n          <Button class=\"digit\" value={\"7\"} onClick={this.handleButtonPress} />\n          <Button class=\"digit\" value={\"8\"} onClick={this.handleButtonPress} />\n          <Button class=\"digit\" value={\"9\"} onClick={this.handleButtonPress} />\n          <Button\n            class=\"operation\"\n            value={\"*\"}\n            onClick={this.handleButtonPress}\n          />\n          <Button\n            class=\"operation\"\n            value={\"/\"}\n            onClick={this.handleButtonPress}\n          />\n        </div>\n        <div>\n          <Button\n            class=\"digit\"\n            value={\"+/-\"}\n            onClick={this.handleButtonPress}\n          />\n          <Button class=\"digit\" value={\"0\"} onClick={this.handleButtonPress} />\n          <Button class=\"digit\" value={\".\"} onClick={this.handleButtonPress} />\n          <Button class=\"equals\" value={\"=\"} onClick={this.handleButtonPress} />\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Calculator from \"./components/Calculator\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Calculator />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}